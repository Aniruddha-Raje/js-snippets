Event loop checks for Stack and Task queue
Only when Stack is empty, Event loop will pick the callback from the Task queue

REPL stands for Read Evaluate Print Loop

- Middleware is a function receives the Request and Response objects. 
- The next function of middleware is represented with the help of a variable, usually named next. 
- Execute any type of code
- Update or modify the request and the response objects
- Finish the request-response cycle
- Invoke the next middleware in the stack

setInterval (more accurate) vs setTimeout(waits and adds up to 1000ms)

REBASE
https://www.youtube.com/watch?v=f1wnYdLEpgI
git chekout feature 
git rebase master
(resolve conflicts here)
get chekout master
git rebase feature
git push master


Exit codes are a set of specific codes which are used for finishing a specific process -
- Uncaught fatal exception
- Unused
- Fatal Error
- Internal Exception handler Run-time failure
- Internal JavaScript Evaluation Failure


setTimeout/clearTimeout – Used to schedule code execution after a designated amount of milliseconds
setInterval/clearInterval – Used to execute a block of code multiple times
setImmediate/clearImmediate – Used to execute code at the end of the current event loop cycle
process.nextTick – Used to schedule a callback function that needs to be invoked in the next iteration of the Event Loop

All npm packages contain a file, usually in the project root, called package.json - 
allows it to identify the project 
handle the project's dependencies. 
contain other metadata such as a project description, the version, license information, even configuration data
npm install <package-name> --save-dev
npm install <package-name> [--save-prod] (the default behavior of npm install)
The package-lock.json is solely used to lock dependencies to a specific version number.

Package.json
{
    "name": "my-project",
    "version": "1.5.0",
    "description": "Express server project using compression",
    "main": "src/index.js",
    "scripts": {
        "start": "node index.js",
        "dev": "nodemon",
        "lint": "eslint **/*.js",
        "build": "webpack src/app.js dist/bundle.js" //tells welback to start here
        "build:prod": "webpack src/app.js dist/bundle.js -p" //minifies the code
    },
    "dependencies": {
        "express": "^4.16.4",
        "compression": "~1.7.4"
    },
    "devDependencies": {
        "eslint": "^5.16.0",
        "nodemon": "^1.18.11"
    },
    "repository": {
        "type": "git",
        "url": "https://github.com/osiolabs/example.git"
    },
    "author": "Jon Church",
    "contributors": [{
        "name": "Amber Matz",
        "email": "example@example.com",
        "url": "https://www.osiolabs.com/#team"
    }],
    "keywords": ["server", "osiolabs", "express", "compression"]
}